LibVMI v0.6 README
by Bryan D. Payne
=====================

This file contains very basic instructions to get you up and running.  If you
want more details about installation, or programming with LibVMI, then see
the documentation included in the doc/ subdirectory of LibVMI, or view the
documentation online at http://vmitools.sandia.gov.

Transition from XenAccess
-------------------------
The core LibVMI code is based on XenAccess, but there have been many API changes
to make this library faster, easier to use, and more flexible.  XenAccess code
will not directly compile using LibVMI.  However, the migration path is usually
straightforward.  Below are a few notes on the most obvious API changes:

* There are no longer strict / lax versions of the init functions.  The
  remaining init function simply takes a Name to identify the guest VM.  The
  new init function also take an argument that specifies where to access the
  memory from (e.g., Xen, KVM, or a File).  You can also have LibVMI
  automatically determine where to access memory.  For example, the example
  code uses a Name to identify the guest.  Using the auto mode, if this is a
  KVM VM name then LibVMI will connect via KVM.  Similarly, if you specifiy a
  file name, then LibVMI will access that file as a raw memory dump.  All of
  this happens under the hood, so you can write code once that can be readily
  used on a variety of platforms.

* The xa_access_* functions have been replaced with vmi_read_* functions.
  The read functions give you the flexibility to read as much or as little
  memory as you desire, so you are no longer working within page boundaries.
  The read functions also handle page mapping management transparently, so 
  you never need to worry about unmapping pages or writing code in a specific
  way for performance reasons.  You can simply use the read functions and
  LibVMI will work to make your memory accesses as fast as possible.

* The xa_read_long_* functions have been renamed for clarity.  These functions
  continue to work in the same way, just with different names.  For example:
     xa_read_long_sym --> vmi_read_32_ksym
     xa_read_long_long_virt --> vmi_read_64_va
  Using this new naming convention, there are also new functions to make it
  simple to read 8 bits / 1 byte and 16 bites / 2 bytes at a time.

* There are now translation routines to perform kernel virtual address lookups,
  user virtual address lookups, and kernel symbol lookups.

* Kernel symbols on Windows are now available from both the kernel header
  exports and the KPCR table.  The KPCR symbols are new, and useful because
  these include many otherwise hard to find data locations.

* The LibVMI instance structure is now opaque.  There are accessor functions
  available to return useful information from this structure.

For more details on using LibVMI, see the online documentation available at
http://vmitools.sandia.gov.

Python Interface
----------------
LibVMI is written in C.  If you would rather work with Python, then look at
the tools/pyvmi/ directory after installing LibVMI.  PyVMI provides a
feature complete python interface to LibVMI with a relatively small
performance overhead.

Dependencies
------------
The following libraries are used in building this code:

libxc (from Xen, the Xen Control library, required for Xen support)
libxenstore (from Xen, access to the xenstore, required for Xen support)
libvirt (from Red Hat, access to KVM guests, required for KVM support)
qemu-kvm patch (for KVM memory access, required for KVM support, see Note 2)
yacc OR bison (for reading the configuration file)
lex OR flex (for reading the configuration file)
glib (version 2.22 or better is required)

Note 1: If you are installing a packaged version of Xen, you will likely
  need to install something like 'xen-devel' to obtain the files needed
  from libxc and libxenstore in the dependencies listed above.

Note 2: If you want KVM support then you will need to build your own 
  version of QEMU-KVM.  Before building, you need to apply the patch
  provided under the libvmi/tools/qemu-kvm-patch directory.  This patch
  allows LibVMI to access the memory of a running QEMU-KVM guest.  
  Hopefully this patch will get accepted upstream, but until then this
  is the only option.

Building
--------
LibVMI uses the standard GNU build system.  To compile this library, simply
follow the steps below:

./autogen.sh
./configure
make

The example code will work without installing LibVMI.  However, you may
choose to install the library into the prefix specified to 'configure' by:

make install

The default installation prefix is /usr/local.  You may need to run
'ldconfig' after performing a 'make install'.
